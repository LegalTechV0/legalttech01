
---
- name: Fully automated deployment of Nextcloud AIO with Nginx reverse proxy and AWS SES
  hosts: all
  become: yes

  vars:
    docker_image: ghcr.io/nextcloud-releases/all-in-one:latest
    domain_name: vaultra.ai
    apache_port: 11000
    nginx_config_http: /etc/nginx/sites-available/{{ domain_name }}_http
    nginx_config_https: /etc/nginx/sites-available/{{ domain_name }}_https
    nginx_enabled_path: /etc/nginx/sites-enabled/{{ domain_name }}
    webroot_path: /var/www/html
    dhparam_path: /etc/dhparam
    email: legalteach373@gmail.com

    # AWS SES
    mail_from_address: no-reply
    mail_domain: vaultra.ai
    smtp_host: email-smtp.eu-north-1.amazonaws.com
    smtp_port: 465
    smtp_user: AKIAUME6NBLZLPRIRCFR
    smtp_pass: BHuymi3jf3+D9PzxiB2gaOswnerY2waJTqaENVwFdYWr

  tasks:
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - nginx
          - certbot
          - python3-certbot-nginx
          - curl
          - ca-certificates
          - lsb-release
          - apt-transport-https
        state: present
        update_cache: yes

    - name: Enable and start Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Remove default Nginx config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Ensure dhparam file exists
      get_url:
        url: https://ssl-config.mozilla.org/ffdhe2048.txt
        dest: "{{ dhparam_path }}"
        mode: '0644'

    - name: Create HTTP-only Nginx config
      copy:
        dest: "{{ nginx_config_http }}"
        content: |
          server {
              listen 80;
              listen [::]:80;
              server_name {{ domain_name }};

              location /.well-known/acme-challenge/ {
                  root {{ webroot_path }};
              }

              location / {
                  proxy_pass http://127.0.0.1:{{ apache_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Enable Nginx site (HTTP-only)
      file:
        src: "{{ nginx_config_http }}"
        dest: "{{ nginx_enabled_path }}"
        state: link
        force: yes

    - name: Ensure Nginx is running after HTTP config
      systemd:
        name: nginx
        state: restarted
        enabled: true

    - name: Obtain SSL certificate
      shell: |
        certbot certonly --webroot \
          -w {{ webroot_path }} \
          -d {{ domain_name }} \
          --agree-tos \
          --email {{ email }} \
          --non-interactive
      args:
        creates: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"

    - name: Overwrite Nginx config with HTTPS
      copy:
        dest: "{{ nginx_config_https }}"
        content: |
          map $http_upgrade $connection_upgrade {
              default upgrade;
              '' close;
          }

          server {
              listen 80;
              server_name {{ domain_name }};
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl http2;
              server_name {{ domain_name }};

              ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;
              ssl_dhparam {{ dhparam_path }};

              location / {
                  proxy_pass http://127.0.0.1:{{ apache_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection $connection_upgrade;
              }
          }

    - name: Enable Nginx site (HTTPS)
      file:
        src: "{{ nginx_config_https }}"
        dest: "{{ nginx_enabled_path }}"
        state: link
        force: yes

    - name: Ensure Nginx is running after HTTPS config
      systemd:
        name: nginx
        state: restarted
        enabled: true

    - name: Stop and remove existing Nextcloud AIO mastercontainer
      shell: |
        docker stop nextcloud-aio-mastercontainer || true
        docker rm nextcloud-aio-mastercontainer || true

    - name: Run Nextcloud AIO mastercontainer (no S3 config)
      shell: |
        docker run -d \
          --init \
          --sig-proxy=false \
          --name nextcloud-aio-mastercontainer \
          --restart always \
          --publish 8080:8080 \
          --env APACHE_PORT={{ apache_port }} \
          --env APACHE_IP_BINDING=0.0.0.0 \
          --env SKIP_DOMAIN_VALIDATION=true \
          --env NEXTCLOUD_MEMORY_LIMIT=1024M \
          --volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \
          --volume /var/run/docker.sock:/var/run/docker.sock:ro \
          {{ docker_image }}

    - name: Wait until Nextcloud container is healthy (300 seconds)
      shell: sleep 300

    - name: Configure AWS SES SMTP settings
      shell: |
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtpmode --value="smtp"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_sendmailmode --value="smtp"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_from_address --value="{{ mail_from_address }}"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_domain --value="{{ mail_domain }}"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtpsecure --value="tls"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtpauth --value="1"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtphost --value="{{ smtp_host }}"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtpport --value="{{ smtp_port }}"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtpname --value="{{ smtp_user }}"
        docker exec nextcloud-aio-nextcloud php occ config:system:set mail_smtppassword --value="{{ smtp_pass }}"
      args:
        executable: /bin/bash

    - name: Install and enable registration app
      shell: |
        docker exec nextcloud-aio-nextcloud php occ app:install registration || true
        docker exec nextcloud-aio-nextcloud php occ app:enable registration
      args:
        executable: /bin/bash

    - name: Create objectstore injection PHP script
      copy:
        dest: /tmp/add_objectstore.php
        content: |
          <?php
          $file = "/var/www/html/config/config.php";
          $injection = "  'objectstore' => array (\n    'class' => 'OC\\Files\\ObjectStore\\S3',\n    'arguments' => array (\n      'bucket' => 'legaltechv1',\n      'key' => 'AKIAUME6NBLZKNQ5HTFQ',\n      'secret' => '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',\n      'region'=> 'eu-north-1',\n      'hostname' => 's3.eu-north-1.amazonaws.com',\n      'port' => 443,\n      'use_ssl' => true,\n      'use_path_style' => true,\n      'autocreate' => true,\n      'verify_bucket_exists' => true,\n      'sse_c_key' => 'o9d3Q9tHcPMv6TIpH53MSXaUmY91YheZRwuIhwCFRSs=',\n    ),\n  ),\n";

          $config = file_get_contents($file);
          if (strpos($config, "'objectstore'") === false) {
            if (preg_match("/\);\s*\$/", $config)) {
              $config = preg_replace("/\);\s*\$/", $injection . "  );", $config);
            } elseif (preg_match("/\);\s*\?>\s*\$/", $config)) {
              $config = preg_replace("/\);\s*\?>\s*$/", $injection . "  );\n?>", $config);
            }
            file_put_contents($file, $config);
          }

    - name: Copy and run objectstore script inside Nextcloud container
      shell: |
        docker cp /tmp/add_objectstore.php nextcloud-aio-nextcloud:/tmp/add_objectstore.php
        docker exec nextcloud-aio-nextcloud php /tmp/add_objectstore.php
        docker exec nextcloud-aio-nextcloud rm /tmp/add_objectstore.php

    - name: Restart nextcloud-aio-nextcloud container
      shell: docker restart nextcloud-aio-nextcloud
